#include <bits/stdc++.h>
#define fi first
#define se second
 
using namespace std;
using ll = long long;
const int Mod = 1e9+7;

struct data {
    int index;
    int value;
    data() {
        index = value = 0;
    }
    data(int id, int val) {
        index = id;
        value = val;
    }
} tree[400005];

int n, m, a[100005];

bool operator >= (const data &a, const data &b) {
    return a.value >= b.value;
}

void build(int node, int start, int end) {
    if (start == end) {
        tree[node] = data(start,a[start]);
    }
    else {
        int mid = (start + end) / 2;
        build(2*node,start,mid);
        build(2*node+1,mid+1,end);
        tree[node] = (tree[2*node] >= tree[2*node+1] ? tree[2*node] : tree[2*node+1]);
    }
}

void update(int node, int start, int end, int idx, int val) {
    if (start == end) {
        a[idx] = val;
        tree[node] = data(start,a[idx]);
    }
    else {
        int mid = (start + end) / 2;
        if (start <= idx and idx <= mid) update(2*node,start,mid,idx,val);
        else update(2*node+1,mid+1,end,idx,val);
        tree[node] = (tree[2*node] >= tree[2*node+1] ? tree[2*node] : tree[2*node+1]);
    }
}

data query(int node, int start, int end, int l, int r) {
    if (start > r or end < l) return data(0,0);
    if (l <= start and end <= r) return tree[node];
    int mid = (start + end)/2;
    data p1 = query(2*node,start,mid,l,r);
    data p2 = query(2*node+1,mid+1,end,l,r);
    return (p1 >= p2 ? p1 : p2);
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //code here
    cin >> n >> m;
    for (int i = 1; i <= n; i++) cin >> a[i];
    build(1,1,n);
    while (m--) {
        string t; int u, v, k;
        cin >> t;
        if (t == "U") {
            cin >> u >> k;
            update(1,1,n,u,k);
        }
        else {
            cin >> u >> v;
            data i = query(1,1,n,u,v);
            data j1 = query(1,1,n,u,i.index-1);
            data j2 = query(1,1,n,i.index+1,v);
            data j = (j1 >= j2 ? j1 : j2);
            cout << i.value + j.value << '\n';
        }
    }
}
