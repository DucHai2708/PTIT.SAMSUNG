#include <bits/stdc++.h>
#define fi first
#define se second
 
using namespace std;
using ll = long long;
const int Mod = 1e9+7;

string s; int q;

struct Node {
    int maxAns, open, close;
    Node() {
        maxAns = open = close = 0;
    }
    Node (int opt,int op,int cl) {
        maxAns = opt;
        open = op;
        close = cl;
    }
} tree[400005];

typedef struct Node Node;

Node operator + (const Node &left, const Node &right) {
    Node res;
    int minn = min(left.open,right.close);
    res.maxAns = left.maxAns + right.maxAns + minn*2;
    res.open = left.open + right.open - minn;
    res.close = left.close + right.close - minn;
    return res;
}


void build(int node, int start, int end) {
    if (start == end) {
        if (s[start] == '(') tree[node] = Node(0,1,0);
        else tree[node] = Node(0,0,1); 
    }
    else {
        int mid = (start + end) / 2;
        build(2*node,start,mid);
        build(2*node+1,mid+1,end);
        tree[node] = tree[2*node] + tree[2*node+1];
    }
}

Node query(int node, int start, int end, int l, int r) {
    if (start > r or end < l) return Node(0,0,0);
    if (l <= start and end <= r) return tree[node];
    int mid = (start + end) / 2;
    Node p1 = query(2*node,start,mid,l,r);
    Node p2 = query(2*node+1,mid+1,end,l,r);
    return (p1 + p2);
}
 
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //code here
    cin >> s >> q;
    s = ' ' + s;
    int n = s.length()-1;
    build(1,1,n);
    while (q--) {
        int l, r;
        cin >> l >> r;
        cout << query(1,1,n,l,r).maxAns << '\n';
    }
}
